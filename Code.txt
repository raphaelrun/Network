# Récupère le secret existant
data "aws_secretsmanager_secret" "master_password" {
  name = "master_password"
}

# Crée un rôle IAM pour la Lambda de rotation
resource "aws_iam_role" "rotation_lambda_role" {
  name = "rotation_lambda_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# Autorisations pour la Lambda
resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  role       = aws_iam_role.rotation_lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

resource "aws_iam_role_policy_attachment" "secretsmanager_access" {
  role       = aws_iam_role.rotation_lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
}

# Déploiement de la fonction Lambda (fournis ton code ZIP et handler)
resource "aws_lambda_function" "rotation_function" {
  function_name = "secrets_rotation_function"
  role          = aws_iam_role.rotation_lambda_role.arn
  handler       = "lambda_function.lambda_handler"
  runtime       = "python3.11"

  filename         = "path/to/your/lambda/code.zip"
  source_code_hash = filebase64sha256("path/to/your/lambda/code.zip")
}

# Activer la rotation
resource "aws_secretsmanager_secret_rotation" "rotation" {
  secret_id           = data.aws_secretsmanager_secret.master_password.id
  rotation_lambda_arn = aws_lambda_function.rotation_function.arn

  rotation_rules {
    automatically_after_days = 90
  }
}